// https://www.acmicpc.net/problem/1010
// 다리 놓기
// 실버 5
// 동적계획법
// 231108
// ---------------------------------------
// // 규칙 찾기
// const factorialCache = [0, 1];
// const factorial = (n) => {
//   if (factorialCache.length - 1 >= n) return factorialCache[n];
//   factorialCache[n] = factorial(n - 1) * n;
//   return factorialCache[n];
// };

// function combination(r, n) {
//   if (n === r) return 1;
//   return Math.round(factorial(n) / (factorial(r) * factorial(n - r)));
// }

// function findPattern() {
//   const testMaxN = 10;
//   const testMaxM = 10;

//   const comb = Array.from({ length: testMaxN + 1 }, () =>
//     Array(testMaxM + 1).fill(0)
//   );
//   Array.from({ length: testMaxM + 1 }).forEach((_, i) => (comb[0][i] = i));
//   Array.from({ length: testMaxN + 1 }).forEach((_, i) => (comb[i][0] = i));

//   for (let n = 1; n <= testMaxN; n += 1) {
//     for (let m = n; m <= testMaxM; m += 1) {
//       comb[n][m] = n === m ? 1 : combination(n, m);
//     }
//   }

//   console.log(comb.map((v) => v.join("\t")).join("\n"));
// }
// findPattern();
// ------------------------------------------------------------------------------
// n\m     1       2       3       4       5       6       7       8       9       10
// 1       1       2       3       4       5       6       7       8       9       10
// 2       0       1       3       6       10      15      21      28      36      45
// 3       0       0       1       4       10      20      35      56      84      120
// 4       0       0       0       1       5       15      35      70      126     210
// 5       0       0       0       0       1       6       21      56      126     252
// 6       0       0       0       0       0       1       7       28      84      210
// 7       0       0       0       0       0       0       1       8       36      120
// 8       0       0       0       0       0       0       0       1       9       45
// 9       0       0       0       0       0       0       0       0       1       10
// 10      0       0       0       0       0       0       0       0       0       1
// ------------------------------------------------------------------------------
// ## solution 1 : 조합 공식
// const factorialCache = [0, 1];
// const factorial = (n) => {
//   if (factorialCache.length - 1 >= n) return factorialCache[n];
//   factorialCache[n] = factorial(n - 1) * n;
//   return factorialCache[n];
// };

// function combination(r, n) {
//   if (n === r) return 1;
//   return Math.round(factorial(n) / (factorial(r) * factorial(n - r)));
// }
// ---------------------------------------
// ## solution 2 : DP
const dp = Array.from({ length: 31 }, () => Array(31).fill(null));
Array.from({ length: 31 }).forEach((_, i) => {
  dp[1][i] = i;
});

function combinationDP(targetN, targetM) {
  if (dp[targetN][targetM]) return dp[targetN][targetM];

  for (let n = 2; n <= targetN; n += 1) {
    dp[n][n] = 1;
    for (let m = n + 1; m <= targetM; m += 1) {
      if (!dp[n][m]) dp[n][m] = dp[n][m - 1] + dp[n - 1][m - 1];
    }
  }

  return dp[targetN][targetM];
}
// ---------------------------------------
// ## solution 3 : Table 사용
// const resultTable = [
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     0, 0, 0, 0, 0, 0, 0,
//   ],
//   [
//     0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
//     21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
//   ],
//   [
//     0, 0, 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, 66, 78, 91, 105, 120, 136, 153,
//     171, 190, 210, 231, 253, 276, 300, 325, 351, 378, 406, 435, 465,
//   ],
//   [
//     0, 0, 0, 1, 4, 10, 20, 35, 56, 84, 120, 165, 220, 286, 364, 455, 560, 680,
//     816, 969, 1140, 1330, 1540, 1771, 2024, 2300, 2600, 2925, 3276, 3654, 4060,
//     4495,
//   ],
//   [
//     0, 0, 0, 0, 1, 5, 15, 35, 70, 126, 210, 330, 495, 715, 1001, 1365, 1820,
//     2380, 3060, 3876, 4845, 5985, 7315, 8855, 10626, 12650, 14950, 17550, 20475,
//     23751, 27405, 31465,
//   ],
//   [
//     0, 0, 0, 0, 0, 1, 6, 21, 56, 126, 252, 462, 792, 1287, 2002, 3003, 4368,
//     6188, 8568, 11628, 15504, 20349, 26334, 33649, 42504, 53130, 65780, 80730,
//     98280, 118755, 142506, 169911,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 1, 7, 28, 84, 210, 462, 924, 1716, 3003, 5005, 8008,
//     12376, 18564, 27132, 38760, 54264, 74613, 100947, 134596, 177100, 230230,
//     296010, 376740, 475020, 593775, 736281,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 1, 8, 36, 120, 330, 792, 1716, 3432, 6435, 11440,
//     19448, 31824, 50388, 77520, 116280, 170544, 245157, 346104, 480700, 657800,
//     888030, 1184040, 1560780, 2035800, 2629575,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 45, 165, 495, 1287, 3003, 6435, 12870, 24310,
//     43758, 75582, 125970, 203490, 319770, 490314, 735471, 1081575, 1562275,
//     2220075, 3108105, 4292145, 5852925, 7888725,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 10, 55, 220, 715, 2002, 5005, 11440, 24310,
//     48620, 92378, 167960, 293930, 497420, 817190, 1307504, 2042975, 3124550,
//     4686825, 6906900, 10015005, 14307150, 20160075,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 11, 66, 286, 1001, 3003, 8008, 19448,
//     43758, 92378, 184756, 352716, 646646, 1144066, 1961256, 3268760, 5311735,
//     8436285, 13123110, 20030010, 30045015, 44352165,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 12, 78, 364, 1365, 4368, 12376, 31824,
//     75582, 167960, 352716, 705432, 1352078, 2496144, 4457400, 7726160, 13037895,
//     21474180, 34597290, 54627300, 84672315,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 13, 91, 455, 1820, 6188, 18564,
//     50388, 125970, 293930, 646646, 1352078, 2704156, 5200300, 9657700, 17383860,
//     30421755, 51895935, 86493225, 141120525,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 14, 105, 560, 2380, 8568, 27132,
//     77520, 203490, 497420, 1144066, 2496144, 5200300, 10400600, 20058300,
//     37442160, 67863915, 119759850, 206253075,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 15, 120, 680, 3060, 11628,
//     38760, 116280, 319770, 817190, 1961256, 4457400, 9657700, 20058300,
//     40116600, 77558760, 145422675, 265182525,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 16, 136, 816, 3876, 15504,
//     54264, 170544, 490314, 1307504, 3268760, 7726160, 17383860, 37442160,
//     77558760, 155117520, 300540195,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 17, 153, 969, 4845,
//     20349, 74613, 245157, 735471, 2042975, 5311735, 13037895, 30421755,
//     67863915, 145422675, 300540195,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 18, 171, 1140, 5985,
//     26334, 100947, 346104, 1081575, 3124550, 8436285, 21474180, 51895935,
//     119759850, 265182525,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 19, 190, 1330,
//     7315, 33649, 134596, 480700, 1562275, 4686825, 13123110, 34597290, 86493225,
//     206253075,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 20, 210, 1540,
//     8855, 42504, 177100, 657800, 2220075, 6906900, 20030010, 54627300,
//     141120525,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 21, 231,
//     1771, 10626, 53130, 230230, 888030, 3108105, 10015005, 30045015, 84672315,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 253,
//     2024, 12650, 65780, 296010, 1184040, 4292145, 14307150, 44352165,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 23,
//     276, 2300, 14950, 80730, 376740, 1560780, 5852925, 20160075,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 24,
//     300, 2600, 17550, 98280, 475020, 2035800, 7888725,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
//     25, 325, 2925, 20475, 118755, 593775, 2629575,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     1, 26, 351, 3276, 23751, 142506, 736281,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     0, 1, 27, 378, 3654, 27405, 169911,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     0, 0, 1, 28, 406, 4060, 31465,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     0, 0, 0, 1, 29, 435, 4495,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     0, 0, 0, 0, 1, 30, 465,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     0, 0, 0, 0, 0, 1, 31,
//   ],
//   [
//     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
//     0, 0, 0, 0, 0, 0, 1,
//   ],
// ];
// ---------------------------------------
const fs = require("fs");
const isTest = process.platform !== "linux";
const inputFilePaths = !isTest
  ? ["/dev/stdin"]
  : [
      "./input1.txt", //
      // "./input2.txt", //
      // "./input3.txt", //
    ];

for (let filePath of inputFilePaths) {
  if (isTest) console.log("==============", filePath);
  const inputString = fs.readFileSync(filePath).toString();
  const [info, ...testcase] = inputString.trim().split("\n");

  // 방법 1) combination 공식 결과 저장하여 사용
  // const result = testcase
  //   .map((str) => combination(...str.split(" ").map(Number)))
  //   .join("\n");

  // 방법 2) DP
  const result = testcase
    .map((str) => combinationDP(...str.split(" ").map(Number)))
    .join("\n");

  // 방법 3) 테이블 사용
  // const result = testcase
  //   .map((str) => {
  //     const [n, m] = str.split(" ").map(Number);
  //     return resultTable[n][m];
  //   })
  //   .join("\n");
  console.log(result.trim());
}
